import * as chrome from "chrome-aws-lambda";
import * as puppeteer from "puppeteer-core";

interface PuppeteerOptions {
    args: string[];
    executablePath: string;
    headless: boolean;
}

export const getOptions = async (): Promise<PuppeteerOptions> => {
    /**
     * Else, use the path of chrome-aws-lambda and its args
     */
    return {
        args: chrome.args,
        executablePath: await chrome.executablePath,
        headless: chrome.headless,
    };
};

type ScreenshotOptions = {
    url: string;
};

export const getScreenshot = async ({
    url,
}: ScreenshotOptions): Promise<Buffer> => {
    const options = await getOptions();
    const browser = await puppeteer.launch(options);
    const page = await browser.newPage();

    /**
     * Here we set the viewport manually to a big resolution
     * to ensure the target,i.e. our code snippet image is visible
     */
    await page.setViewport({
        width: 2560,
        height: 1080,
        deviceScaleFactor: 2,
    });

    /**
     * Navigate to the url generated by getCarbonUrl
     */
    await page.goto(url, { waitUntil: "load" });

    const exportContainer = await page.waitForSelector("#export-container");
    const elementBounds = await exportContainer.boundingBox();

    if (!elementBounds)
        throw new Error("Cannot get export container bounding box");

    const buffer = await exportContainer.screenshot({
        encoding: "binary",
        clip: {
            ...elementBounds,
            /**
             * Little hack to avoid black borders:
             * https://github.com/mixn/carbon-now-cli/issues/9#issuecomment-414334708
             */
            x: Math.round(elementBounds.x),
            height: Math.round(elementBounds.height) - 1,
        },
    });

    /**
     * Return the buffer representing the screenshot
     */
    return buffer;
};